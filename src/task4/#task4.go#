package task4

import (
	"errors"
	"math"
	"strconv"
)

// make it using ints and nit strings!

type T4 struct {
	Number int
}

func (T *T4) Dotask4() (err error, data int) {
	return Dotask(T.Number)
}

func reverseString(s string) string {
	var newString string = ""
	for i := len(s) - 1; i >= 0; i-- {
		newString += string(s[i])
	}
	return newString
}

func isPal(n []int) (b bool) {
	if slicetonum(n) == slicetonum(reversenum(n)) && len(strconv.Itoa(slicetonum(n))) > 1 {
		b = true
	}
	return b
}

func findLargest(sl []int) []int {
	var largest []int
	var largestSize int = 1
	for _, v := range sl {
		if len(strconv.Itoa(v)) > largestSize {
			largestSize = len(strconv.Itoa(v))
		}
	}
	for _, v := range sl {
		if len(strconv.Itoa(v)) == largestSize {
			largest = append(largest, v)
		}
	}
	return largest
}

func slicetonum(sl []int) int {
	l := float64(len(sl))
	n := 0.0
	pow := l
	for i := 0; i < int(l); i++ {
		n += float64(sl[i]) * math.Pow(10, pow)
		pow -= 1
	}
	return int(n)/10
}	
func numtoslice(num int) []int {
	l := len(strconv.Itoa(num))
	tmp := make([]int, l)

	for i:= l-1; i >= 0; i-- {
		tmp[i] = num % 10
		num = num / 10 
	}
	return tmp
}	

func reversenum(num []int) []int {
	var rev []int
	for i:=len(num)-1; i >= 0; i-- {
		rev = append(rev, num[i])
	}
	return rev
}

	
func Dotask(num int) (err error, data int) {
	var ok bool
	ABC := numtoslice(num) 
	CBA := reversenum(ABC) 
	var largestPal int
	var pals []int
	var largestPals []int
	if num <= 0 {
		return errors.New("\nОшибка!\nЗадайте число больше нуля"), data

	}

	for i1, v1 := range ABC {
		for i2, v2 := range CBA {

			first := i1+i2 < len(ABC)
			second := v2 == v1
			third := isPal(ABC[i1:len(ABC)-i2])
			if first && second && third {
				pals = append(pals, slicetonum(ABC[i1:len(ABC)-i2]))

				ok = true
			}
		}
	}

	if ok {
		largestPals = append(largestPals, findLargest(pals)...)
	}

	for _, v := range largestPals {
		if largestPal < v {
			largestPal = v
		}
	}

	return nil, largestPal

}
